{"version":3,"file":"downup-animation.component.js","sourceRoot":"","sources":["downup-animation.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAsC,eAAe,CAAC,CAAA;AAEtD,2CAA0B,6CAA6C,CAAC,CAAA;AACxE,iCAAgC,mCAAmC,CAAC,CAAA;AACpE,0CAAuC,4CAA4C,CAAC,CAAA;AACpF,oCAAsC,sCAAsC,CAAC,CAAA;AAC7E,8CAA2C,gDAAgD,CAAC,CAAA;AAE5F,8CAA2C,6CAA6C,CAAC,CAAA;AAqCzF;IAAA;QACE,cAAS,GAAS,IAAI,CAAC;QACvB,YAAO,GAAY,KAAK,CAAC;QAC3B,8BAA8B;QAC9B,mCAAmC;QACjC,YAAO,GAAQ,mFAAmF,CAAC;IAIrG,CAAC;IAHC,6CAAU,GAAV;QACI,IAAI,CAAC,SAAS,GAAC,CAAC,IAAI,CAAC,SAAS,CAAC;IACnC,CAAC;IA1CH;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,iBAAiB;YAC9B,QAAQ,EAAE,whCAsBT;YACE,MAAM,EAAC;gBACC,uEAAuE;gBACvE,2DAA2D;aAC7D;YACN,UAAU,EAAG,CAAC,sCAAS,EAAC,kCAAe;gBACzB,kDAAsB,EAAC,2CAAqB;gBAC5C,0DAA0B;gBAC1B,0DAA0B,CAAC;SAC5C,CAAC;;gCAAA;IAUF,+BAAC;AAAD,CAAC,AATD,IASC;AATY,gCAAwB,2BASpC,CAAA","sourcesContent":["import { Component,Input,Output} from '@angular/core';\n\nimport { DownupBox } from '../app-directive/downup.animation.directive';\nimport { UnlessDirective } from '../app-directive/unless.directive';\nimport { XxjSwipeCountDirective } from '../app-directive/xxj-swipe-count.directive';\nimport { XxjHighlightDirective } from '../app-directive/highlight.directive';\nimport { DynamicHtmlOutletDirective } from '../app-directive/dynamic-html-outlet.directive';\n\nimport { BindEventRendererComponent } from '../bind-event/bind-event-renderer.component';\nimport { UseBroadcastParentComponent } from '../use-custom-broadcast/use-broadcast-parent.component';\n\n@Component({\n    selector: 'downupAnimation',\n\ttemplate: `\n    <div downup-box #box=\"downup\" style=\"height:0; width:50%; overflow: hidden;\">Some content</div>\n    <button (click)=\"box.toggle(visible = !visible)\">Animate</button>\n    <hr>\n    <p class=\"small-show\" *myUnless=\"condition\">\n       condition is false and myUnless is true.\n    </p>\n    <hr>\n    <p class=\"small-show\" *myUnless=\"!condition\">\n       condition is true and myUnless is false.\n    </p>\n    <hr>\n    <button (click)=\"changeShow()\">{{condition ? \"show\" :\"hide\"}}</button>\n    <hr>\n    <div class=\"small-show\">Check Using HostBinding swipe</div>\n    <div class=\"small-show\" swipe-count>Counting how many swipes</div>\n    <div class=\"small-show\">Check Using mousein/out change style</div>\n    <div class=\"small-show\" xxjHighlight=\"green\">Change style</div>\n    <div class=\"small-show\">Binding Event by renderer</div>\n    <bind-event-renderer class=\"small-show\"></bind-event-renderer>\n    <dynamic-html-outlet [src]=\"htmlStr\" class=\"small-show\"></dynamic-html-outlet>\n    \n\t`,\n    styles:[ \n            \"button {font-size:0.8em;width:6em;height:1em; background-color:grey;}\",\n            \".small-show{font-size:0.6em;color:black;background:grey;}\"\n         ],\n    directives : [DownupBox,UnlessDirective,\n                  XxjSwipeCountDirective,XxjHighlightDirective,\n                  DynamicHtmlOutletDirective,\n                  BindEventRendererComponent]\n})\nexport class DownupAnimationComponent {\n  condition:boolean=true;\n  visible: boolean = false;\n//   hideMyChild: Object = {};\n//   items: number[] = [1,2,3,4,5];\n  htmlStr:string='<div style=\"background:grey;color:red;\">This is dynamic html outlet\\'s text</div>';\n  changeShow(){\n      this.condition=!this.condition;\n  }\n}\n"]}