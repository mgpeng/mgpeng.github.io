{"version":3,"file":"use-broadcast-child.component.js","sourceRoot":"","sources":["use-broadcast-child.component.ts"],"names":[],"mappings":"AAAA,6CAA6C;AAC7C,iEAAiE;;;;;;;;;;;AAEjE,eAAe;AACf,sCAAsC;AACtC,KAAK;AACL,4CAA4C;AAC5C,oDAAoD;AACpD,MAAM;AAEN,gCAAgC;AAChC,6CAA6C;AAC7C,gCAAgC;AAChC,yDAAyD;AACzD,YAAY;AACZ,MAAM;AAEN,4BAA4B;AAC5B,6DAA6D;AAC7D,qCAAqC;AACrC,MAAM;AACN,IAAI;AACJ,qBAA+B,eAAe,CAAC,CAAA;AAK/C,4BAA4B,iCAAiC,CAAC,CAAA;AAC9D,8BAA2B,mCAAmC,CAAC,CAAA;AAuB/D;IAME,oCACU,WAAwB,EACxB,YAA0B;QAD1B,gBAAW,GAAX,WAAW,CAAa;QACxB,iBAAY,GAAZ,YAAY,CAAc;IACjC,CAAC;IAEJ,6CAAQ,GAAR;QACE,kCAAkC;QAClC,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED,4DAAuB,GAAvB;QAAA,iBAYC;QAXC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAS,SAAS,CAAC;aACnC,SAAS,CAAC,UAAA,OAAO;YAChB,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChB,YAAY,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;YAC5B,CAAC;YACD,KAAI,CAAC,MAAM,GAAG,UAAU,CAAC;gBACvB,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;gBAClB,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACrB,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0DAAqB,GAArB;QAAA,iBAYC;QAXC,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE;aACnB,SAAS,CAAC,UAAA,OAAO;YAChB,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChB,YAAY,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;YAC5B,CAAC;YACD,KAAI,CAAC,MAAM,GAAG,UAAU,CAAC;gBACvB,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;gBAClB,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACrB,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IAED,yCAAI,GAAJ;QACE,8BAA8B;QAC9B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC,cAAc,GAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED,wDAAmB,GAAnB;QACE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,EAAE,kBAAgB,IAAI,CAAC,OAAS,CAAC,CAAC;IACxE,CAAC;IAED,sDAAiB,GAAjB;QACE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,kBAAgB,IAAI,CAAC,OAAS,CAAC,CAAC;IACzD,CAAC;IAxDD;QAAC,YAAK,EAAE;;+DAAA;IACR;QAAC,YAAK,EAAE;;iEAAA;IAvBV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;YAC/B,QAAQ,EAAE,gPAOX;YACC,MAAM,EAAE,CAAC,gHAMV,CAAC;YACA,SAAS,EAAE;gBACT,4BAAY;aACb;SACF,CAAC;;kCAAA;IA2DF,iCAAC;AAAD,CAAC,AA1DD,IA0DC;AA1DY,kCAA0B,6BA0DtC,CAAA","sourcesContent":["// import { Component } from '@angular/core';\n// import { Broadcaster } from '../custom-broadcast/broadcaster';\n\n// @Component({\n//     selector: 'use-broadcast-child'\n// })\n// export class UseBroadcastChildComponent {\n//   constructor(private broadcaster: Broadcaster) {\n//   }\n  \n//   registerStringBroadcast() {\n//     this.broadcaster.on<string>('MyEvent')\n//       .subscribe(message => {\n//          console.log(\"register string event MyEvent\");\n//       });\n//   }\n\n//   emitStringBroadcast() {\n//     this.broadcaster.broadcast('MyEvent', 'some message');\n//     console.log(\"emited MyEvent\");\n//   }\n// }\nimport {Component, Input} from '@angular/core';\n\nimport {MdGestureConfig} from '@angular2-material/core/gestures/MdGestureConfig';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\n\nimport { Broadcaster } from '../custom-broadcast/broadcaster';\nimport {MessageEvent} from '../custom-broadcast/message-event';\n\n@Component({\n  selector: 'use-broadcast-child',\n  template: `\n        <div class=\"container\">\n          <b>Child#{{childId}}--{{eventType}}</b>\n          <button on-{{eventType}}=\"emit()\">Emit</button>\n          <span>{{message}}</span>\n          <ng-content></ng-content>\n        </div>\n`,\n  styles: [`\n      .container {\n        border: solid 1px black;\n        padding: 5px;\n        margin: 5px;\n      }\n`],\n  providers: [\n    MessageEvent\n  ],\n})\nexport class UseBroadcastChildComponent {\n  @Input() childId: string;\n  @Input() eventType:string;\n  message: string;\n  _timer: any;\n\n  constructor(\n    private broadcaster: Broadcaster,\n    private messageEvent: MessageEvent\n  ) {}\n\n  ngOnInit() {\n    // this.registerStringBroadcast();\n    this.registerTypeBroadcast();\n    console.log(this);\n  }\n\n  registerStringBroadcast() {\n    this.broadcaster.on<string>('message')\n      .subscribe(message => {\n        this.message = message;\n        if (this._timer) {\n          clearTimeout(this._timer);\n        }\n        this._timer = setTimeout(() => {\n          this.message = '';\n          this._timer = null;\n        }, 3000);\n      });\n  }\n\n  registerTypeBroadcast() {\n    this.messageEvent.on()\n      .subscribe(message => {\n        this.message = message;\n        if (this._timer) {\n          clearTimeout(this._timer);\n        }\n        this._timer = setTimeout(() => {\n          this.message = '';\n          this._timer = null;\n        }, 3000);\n      });\n  }\n\n  emit() {\n    // this.emitStringBroadcast();\n    this.emitTypeBroadcast();\n    console.log(\"ckp: event--\"+this.eventType);\n  }\n\n  emitStringBroadcast() {\n    this.broadcaster.broadcast('message', `Message from ${this.childId}`);\n  }\n\n  emitTypeBroadcast() {\n    this.messageEvent.fire(`Message from ${this.childId}`);\n  }\n}\n\n"]}